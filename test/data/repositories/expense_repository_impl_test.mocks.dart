// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/data/repositories/expense_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracker/data/models/expense_model.dart' as _i2;
import 'package:expense_tracker/data/sources/expense_local_data_source.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseModel_0 extends _i1.SmartFake implements _i2.ExpenseModel {
  _FakeExpenseModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseLocalDataSource extends _i1.Mock
    implements _i3.ExpenseLocalDataSource {
  MockExpenseLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ExpenseModel>> getExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, []),
            returnValue: _i4.Future<List<_i2.ExpenseModel>>.value(
              <_i2.ExpenseModel>[],
            ),
          )
          as _i4.Future<List<_i2.ExpenseModel>>);

  @override
  _i4.Future<_i2.ExpenseModel> getExpenseById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseById, [id]),
            returnValue: _i4.Future<_i2.ExpenseModel>.value(
              _FakeExpenseModel_0(
                this,
                Invocation.method(#getExpenseById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.ExpenseModel>);

  @override
  _i4.Future<void> addExpense(_i2.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateExpense(_i2.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteExpense(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
